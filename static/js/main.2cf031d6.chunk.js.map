{"version":3,"sources":["components/MainImage.tsx","utils/options.ts","components/MenuItem.tsx","components/Menubar.tsx","components/Editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MainImage","style","bgImage","Box","w","h","bgPos","bgSize","backgroundRepeat","DEFAULT_OPTIONS","name","property","value","range","min","max","unit","SidebarItem","active","onClick","Button","cursor","padding","_active","bg","_hover","color","margin","Menubar","children","display","justifyContent","alignItems","Editor","useState","selectedOptionIndex","setSelectedOptionIndex","options","setOptions","setBgImage","randomKey","setRandomKey","fileUploadBtnRef","useRef","selectedOption","Grid","templateColumns","templateRows","templateAreas","borderRadius","map","option","index","key","Slider","onChange","newValue","prevOptions","size","filter","join","height","ref","type","accept","e","target","files","selectedFile","reader","FileReader","onload","event","result","readAsDataURL","marginRight","current","click","App","ThemeProvider","theme","CSSReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2cf031d6.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Box } from '@chakra-ui/core';\n\ninterface Props {\n  style: Record<string, string>;\n  bgImage: string;\n}\n\nexport const MainImage: FunctionComponent<Props> = ({ style, bgImage }) => {\n  return (\n    <Box\n      bgImage={`${bgImage}`}\n      w=\"100%\"\n      h=\"100%\"\n      bgPos=\"center center\"\n      bgSize=\"contain\"\n      backgroundRepeat=\"no-repeat\"\n      style={style}\n    />\n  );\n};\n","export const DEFAULT_OPTIONS = [\n  {\n    name: 'Brightness',\n    property: 'brightness',\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: '%',\n  },\n  {\n    name: 'Contrast',\n    property: 'contrast',\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: '%',\n  },\n  {\n    name: 'Saturation',\n    property: 'saturate',\n    value: 100,\n    range: {\n      min: 0,\n      max: 200,\n    },\n    unit: '%',\n  },\n  {\n    name: 'Grayscale',\n    property: 'grayscale',\n    value: 0,\n    range: {\n      min: 0,\n      max: 100,\n    },\n    unit: '%',\n  },\n  {\n    name: 'Sepia',\n    property: 'sepia',\n    value: 0,\n    range: {\n      min: 0,\n      max: 100,\n    },\n    unit: '%',\n  },\n  {\n    name: 'Hue Rotate',\n    property: 'hue-rotate',\n    value: 0,\n    range: {\n      min: 0,\n      max: 360,\n    },\n    unit: 'deg',\n  },\n  {\n    name: 'Blur',\n    property: 'blur',\n    value: 0,\n    range: {\n      min: 0,\n      max: 20,\n    },\n    unit: 'px',\n  },\n];\n","import { Button } from '@chakra-ui/core';\nimport React, { FunctionComponent } from 'react';\n\ninterface Props {\n  name: string;\n  active: boolean;\n  onClick: () => void;\n}\n\nexport const SidebarItem: FunctionComponent<Props> = ({\n  name,\n  active,\n  onClick,\n}) => {\n  return (\n    <Button\n      cursor=\"pointer\"\n      padding=\"1rem\"\n      _active={{ bg: 'teal.500' }}\n      _hover={{ bg: 'teal.300' }}\n      bg={active ? 'teal.400' : 'gray.500'}\n      color=\"white\"\n      onClick={onClick}\n      margin=\"1rem\"\n    >\n      {name}\n    </Button>\n  );\n};\n","import { Box } from '@chakra-ui/core';\nimport React, { FunctionComponent } from 'react';\n\nexport const Menubar: FunctionComponent = ({ children }) => {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      padding=\"1rem\"\n      alignItems=\"flex-start\"\n    >\n      {children}\n    </Box>\n  );\n};\n","import React, { useRef, useState } from 'react';\nimport { MainImage } from './MainImage';\nimport {\n  Box,\n  Button,\n  Grid,\n  Slider,\n  SliderFilledTrack,\n  SliderThumb,\n  SliderTrack,\n} from '@chakra-ui/core';\nimport { DEFAULT_OPTIONS } from '../utils/options';\nimport { SidebarItem as MenuItem } from './MenuItem';\nimport { Menubar } from './Menubar';\n\nexport const Editor = () => {\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0);\n  const [options, setOptions] = useState(DEFAULT_OPTIONS);\n  const [bgImage, setBgImage] = useState(\n    \"url('https://source.unsplash.com/random')\"\n  );\n  const [randomKey, setRandomKey] = useState(0);\n  const fileUploadBtnRef = useRef<any>(null);\n\n  const selectedOption = options[selectedOptionIndex];\n\n  const handleSliderChange = (newValue: number) => {\n    setOptions((prevOptions) => {\n      return prevOptions.map((option, index) => {\n        if (index !== selectedOptionIndex) return option;\n        return {\n          ...option,\n          value: newValue,\n        };\n      });\n    });\n  };\n\n  const handleReset = () => {\n    setOptions(DEFAULT_OPTIONS);\n  };\n\n  const handleRandomiseImage = () => {\n    setRandomKey(randomKey + 1);\n    setBgImage(`url('https://source.unsplash.com/random/${randomKey + 1}')`);\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<any>) => {\n    if (e.target.files[0] !== null) {\n      var selectedFile = e.target.files[0];\n      var reader = new FileReader();\n\n      reader.onload = (event: any) => {\n        setBgImage(`url('${event.target.result}')`);\n      };\n\n      reader.readAsDataURL(selectedFile);\n    }\n  };\n\n  const getImageStyle = () => {\n    const filters = options.map((option) => {\n      return `${option.property}(${option.value}${option.unit})`;\n    });\n\n    return { filter: filters.join(' ') };\n  };\n\n  return (\n    <Grid\n      bg=\"gray.700\"\n      templateColumns=\"1fr\"\n      templateRows=\"auto 1fr auto\"\n      templateAreas=\"\n      'controls'\n      'image'\n      'user-buttons'\n      \"\n      h=\"100vh\"\n      w=\"100vw\"\n    >\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Box bg=\"gray.900\" borderRadius=\"8px\" margin=\"1rem\">\n          <Menubar>\n            {options.map((option, index) => {\n              return (\n                <MenuItem\n                  key={index}\n                  name={option.name}\n                  active={index === selectedOptionIndex}\n                  onClick={() => setSelectedOptionIndex(index)}\n                />\n              );\n            })}\n          </Menubar>\n          <Box padding=\"1rem\">\n            <Slider\n              value={selectedOption.value}\n              min={selectedOption.range.min}\n              max={selectedOption.range.max}\n              onChange={handleSliderChange}\n            >\n              <SliderTrack bg=\"gray.300\" h=\"10px\" />\n              <SliderFilledTrack bg=\"purple.500\" h=\"10px\" />\n              <SliderThumb size=\"4\" />\n            </Slider>\n          </Box>\n        </Box>\n      </Box>\n      <MainImage bgImage={`${bgImage}`} style={getImageStyle()} />\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        height=\"100px\"\n      >\n        <input\n          ref={fileUploadBtnRef}\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileChange}\n          style={{ display: 'none' }}\n        />\n        <Button\n          marginRight=\"1rem\"\n          onClick={() => fileUploadBtnRef.current.click()}\n        >\n          Open Image\n        </Button>\n        <Button onClick={handleRandomiseImage} marginRight=\"1rem\">\n          Random Image\n        </Button>\n        <Button\n          bg=\"gray.500\"\n          color=\"white\"\n          marginRight=\"1rem\"\n          _hover={{ bg: 'gray.700' }}\n          onClick={handleReset}\n        >\n          Reset\n        </Button>\n      </Box>\n    </Grid>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { ThemeProvider, theme, CSSReset } from '@chakra-ui/core';\nimport { Editor } from './components/Editor';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <Editor />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}